(function(){"use strict";console.log("[physics.worker] Script loaded and executing.");let t,d,x,I=0,p=0;const c=6;let P=6.674,b=4e5,E="simple",q=0;const R=5e4,B=25;function L(h){for(let o=2;o<p;o++){const s=o*3,e=o*c,i=t[e];if(i>99998)continue;const r=t[e+1],l=t[e+2],f=-i,m=-r,u=-l,_=f*f+m*m+u*u;if(_<1e4){t[e]=99999,q++;continue}const n=P*b/_,a=1/Math.sqrt(_);let y=f*a*n,M=m*a*n,g=u*a*n;const A=t[c],v=t[c+1],S=t[c+2],w=A-i,z=v-r,F=S-l,T=w*w+z*z+F*F;if(T>100){const C=P*R/T,D=1/Math.sqrt(T);y+=w*D*C,M+=z*D*C,g+=F*D*C}d[s]=y,d[s+1]=M,d[s+2]=g}}function N(h,o){for(let s=2;s<p;s++){const e=s*3,i=s*c;let r=0,l=0,f=0;const m=t[i];if(m>99998)continue;const u=t[i+1],_=t[i+2];for(let n=0;n<p;n++){if(s===n)continue;const a=t[n*c];if(a>99998)continue;const y=t[n*c+1],M=t[n*c+2],g=a-m,A=y-u,v=M-_;let S=g*g+A*A+v*v;if(o&&s>1&&n>1&&S<B){t[n*c]=99999,q++;continue}if(S<400){n===0&&(t[i]=99999,q++);continue}const w=P*x[n]/S,z=1/Math.sqrt(S);r+=g*z*w,l+=A*z*w,f+=v*z*w}d[e]=r,d[e+1]=l,d[e+2]=f}}function H(h){for(let o=2;o<p;o++){const s=o*c,e=o*3;t[s]>99998||(t[s+3]+=d[e]*h,t[s+4]+=d[e+1]*h,t[s+5]+=d[e+2]*h,t[s]+=t[s+3]*h,t[s+1]+=t[s+4]*h,t[s+2]+=t[s+5]*h)}}let k;function O(){k&&clearInterval(k);const h=1/60;k=setInterval(()=>{try{const o=performance.now();p>2&&(E==="simple"?L(h):N(h,E==="extreme"),H(h));const s=performance.now()-o;self.postMessage({type:"physics_update",buffer:t.buffer,particleCount:p,physicsStepTime:s,consumedParticles:q},[t.buffer])}catch(o){self.postMessage({type:"worker_error",error:{message:o.message,stack:o.stack}}),clearInterval(k)}},1e3/60)}self.onmessage=h=>{const{type:o,...s}=h.data;if(o==="init"){console.log("[physics.worker] Initializing..."),I=s.maxParticles,b=s.blackHoleMass;const e=new ArrayBuffer(I*c*Float32Array.BYTES_PER_ELEMENT);t=new Float32Array(e),d=new Float32Array(I*3),x=new Float32Array(I),x[0]=b,x[1]=R,p=2,console.log("[physics.worker] Initialization complete. Starting physics loop."),self.postMessage({type:"initialized",buffer:t.buffer},[t.buffer]),O()}else if(o==="set_particles"){const e=p;if(p=Math.min(I,s.count),p>e)for(let r=e;r<p;r++){const l=r*c,f=2e3+Math.random()*8e3,m=2*Math.PI*Math.random(),u=Math.acos(2*Math.random()-1)-Math.PI/2,_=f*Math.cos(m)*Math.cos(u),n=f*Math.sin(u)*.5,a=f*Math.sin(m)*Math.cos(u);t[l]=_,t[l+1]=n,t[l+2]=a;const y=Math.sqrt(P*b/f)*(.8+Math.random()*.2),M=new Float32Array([-a,0,_]),g=Math.sqrt(M[0]*M[0]+M[2]*M[2]);g>1e-9&&(M[0]/=g,M[2]/=g),t[l+3]=M[0]*y,t[l+4]=(Math.random()-.5)*20,t[l+5]=M[2]*y,x[r]=1+Math.random()*5}}else if(o==="set_mass")b=s.mass,x&&(x[0]=b);else if(o==="set_quality")E=s.quality;else if(o==="reset"){q=0;for(let e=2;e<p;e++){const i=e*c,r=2e3+Math.random()*8e3,l=2*Math.PI*Math.random(),f=Math.acos(2*Math.random()-1)-Math.PI/2,m=r*Math.cos(l)*Math.cos(f),u=r*Math.sin(f)*.5,_=r*Math.sin(l)*Math.cos(f);t[i]=m,t[i+1]=u,t[i+2]=_;const n=Math.sqrt(P*b/r)*(.8+Math.random()*.2),a=new Float32Array([-_,0,m]),y=Math.sqrt(a[0]*a[0]+a[2]*a[2]);y>1e-9&&(a[0]/=y,a[2]/=y),t[i+3]=a[0]*n,t[i+4]=(Math.random()-.5)*20,t[i+5]=a[2]*n,x[e]=1+Math.random()*5}}else if(o==="update_moon"){if(!t)return;t[c]=s.x,t[c+1]=s.y,t[c+2]=s.z}}})();
